- name: TCP Configuration
  include_role:
    name: tcp

- name: Include role k3s/prereq
  include_role:
    name: k3s/prereq

- name: Configure host service
  include_role:
    name: utils/host-service
  when:
  - join_as_host | default(false)|bool == true

- name: Include role k3s/airgap
  include_role:
    name: k3s/airgap
  vars:
    is_k3s_server: true

- name: Include role k3s/k3s_server
  include_role:
    name: k3s/k3s_server
  vars:
    is_keepalived_master: true

- name: Verify online status
  ansible.builtin.debug:
    msg: Online status is {{ online_status }} and offline_data_path is {{ offline_data_path }}

- name: loading images
  include_role:
    name: utils/load-images
  when:
  - online_status == "offline"
  - offline_data_path | length > 0

- name: Tag and push images to local registry. It might take a few minutes...
  shell: |
    export version_file={{ offline_data_path }}/versions.json
    if ! [ -f "$version_file" ]; then
      echo "[ERROR] version file $version_file is empty! "
      exit
    fi
    imgs=( $(cat $version_file |jq  '.dockers |to_entries[] |.key +":"+ .value' | xargs) )
    echo imgs ${imgs[@]}

    export registry=$(cat $version_file | jq .registry |xargs)
    if [ -z "$registry" ]; then
      echo "[ERROR] registry is empty!"
      exit
    fi
    push_and_tag(){
      local img_name_version=$1
      k3s ctr images tag registry.cn-beijing.aliyuncs.com/$registry/$img_name_version \
        $insecure_registry/$registry/$img_name_version && \
        k3s ctr images push $insecure_registry/$registry/$img_name_version --plain-http
    }
    export -f push_and_tag
    for i in {{docker_insecure_registries | join(" ")}}
    do
      insecure_registry=$i parallel push_and_tag ::: "${imgs[@]}"
    done
  args:
    executable: /bin/bash
  become: yes
  ignore_errors: yes
  when:
  - docker_insecure_registries is defined
  - docker_insecure_registries | length > 0
  - online_status == "offline"
  - offline_data_path is defined
  - offline_data_path | length > 0

- name: Copy calico.yaml to /tmp/calico.yaml
  template:
    src: calico.yaml.j2
    dest: /var/lib/rancher/k3s/server/manifests/calico.yaml

- name: Update traefik component configuration
  copy:
    src: traefik-config.yaml
    dest: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml

- name: Copy traefik daemonset yaml to /var/lib/rancher/k3s/server/manifests/traefik-ds.yaml
  copy:
    src: traefik-ds.yaml
    dest: /var/lib/rancher/k3s/server/manifests/traefik-ds.yaml
